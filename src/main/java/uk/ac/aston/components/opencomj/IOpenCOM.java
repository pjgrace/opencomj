/////////////////////////////////////////////////////////////////////////
//
// Â© Aston University 2022
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
/////////////////////////////////////////////////////////////////////////
//
//  License : GNU Lesser General Public License, version 3
//
/////////////////////////////////////////////////////////////////////////

package uk.ac.aston.components.opencomj;

import java.util.List;


/**
 * Java Interface describing the methods of OpenCOM runtime kernel.
 * The primary runtime operations are: create, delete connect, disconnect,
 * and the meta-operations are list components, get component name etc.
 *
 * Note: This is a direct attempt to port the OpenCOM v1 interface to Java
 * @author  Paul Grace
 * @version 1.2.3
 *
 **/

public interface IOpenCOM extends IUnknown {

    /**
     * Create a new instance of a component and insert it into the OpenCOM runtime. Ideally, the
     * creator should cast the resulting component to IUnknown to enable OpenCOM style programming.
     * @param componentType the string describing the component type i.e. the Java class of the component.
     * @param componentName the string representing the unique (user defined) name of the component.
     * @return an Object that is the reference to the created component. Null indicates failure.
     * @throws uk.ac.aston.components.opencomj.InvalidComponentTypeException
     * @see java.lang.Object
     **/
    IUnknown createInstance(String componentType, String componentName) throws InvalidComponentTypeException;

     /**
     * Deletes a component instance which has been previously created.
     * @param pCompIUnknown an IUnknown reference of the component to delete.
     * @return Indication of success or failure of operation.
     * @see OpenCOM.IUnknown
     **/
    boolean deleteInstance(IUnknown pCompIUnknown);

    /**
     * Connects a receptacle on the Source component to an interface on the Sink component.
     * @param pSourceIUnk Reference to component with the receptacle.
     * @param pComponentIUnk Reference to component with the interface.
     * @param interfaceType a string describing the interface type of the connection.
     * @return a long describing the unique connection identifier generated by the run-time.
     * @see OpenCOM.IUnknown
     **/
    long connect(IUnknown pSourceIUnk, IUnknown pComponentIUnk, String interfaceType);

    /**
     * Disconnects a receptacle from an interface.
     * @param connID a long describing the unique identifier of the connection to destroy.
     * @return Indication of success or failure of operation.
     */
    boolean disconnect(long connID);

    /**
     * Returns meta-information about a given connection.
     * @param connID a long describing the unique identifier of the connection to inspect.
     * @return meta-information about the connection. e.g. Source, Sink, Interface type. Null indicates operation failure.
     * @see OpenCOM.OCM_ConnInfo_t
     */
    OCMConnInfo getConnectionInfo(long connID);

    /**
     * Gets complete set of components currently instantiated in the runtime.
     * @return List of the IUnknown pointers of current components in the kernel graph.
     */
    List<IUnknown> enumComponents();

    /**
     * Returns the registered unique component name for a given component reference.
     * @param pIUnknown an IUnknown reference describing a component instantiation.
     * @return a string describing the unique name of the component.
     * @see OpenCOM.IUnknown
     */
    String getComponentName(IUnknown pIUnknown);

    /**
     * Returns the registered component reference of a named component.
     * @param name a string describing the unique name of the component.
     * @return an IUnknown reference describing the instantiation of the component.
     * @see OpenCOM.IUnknown
     */
    IUnknown getComponentPIUnknown(String name);

    /**
    * This method returns the Component type  for a given instance of a component.
    * @param pIUnknown The reference of the component instance.
    * @return A java string describing the component type.
    */
    String getComponentType(IUnknown pIUnknown);

};

